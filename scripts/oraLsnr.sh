#!/bin/bash 
# oraLsnr.sh - Create Oracle database Listener with NETCA

# Internal settings
SCRIPTVER=1.0
SCRIPTNAME=$(basename "${BASH_SOURCE[0]}")
source "$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"/oralab.shlib

# Default config information if not passed on command line
CONF_FILE="${SCRIPTDIR}"/server.conf
DEF_CONF_FILE="${SCRIPTDIR}"/ora_inst_files.conf

# retun command line help information
function help_oraLsnr {
  echo >&2
  echo "$SCRIPTNAME                                    " >&2
  echo "   used to run NETCA to create Oracle db listener" >&2
  echo "   version: $SCRIPTVER                         " >&2
  echo >&2
  echo "Usage: $SCRIPTNAME [-h --debug --test ]        " >&2
  echo "-h          give this help screen               " >&2
  echo "--orahome [Oracle home]                         " >&2
  echo "--port    [TCP Port]                            " >&2
  echo "--debug     turn on debug mode                  " >&2
  echo "--test      turn on test mode, disable DBCA run " >&2
  echo "--version | -v Show the script version          " >&2
}

#check command line options
function checkopt_oraLsnr {

        #set defaults
    DEBUG=FALSE
    TEST=FALSE
    typeset -i badopt=0

    # shellcheck disable=SC2068
    my_opts=$(getopt -o hv --long debug,test,version,stgdir:,oraver:,orasubver:,orabase:,orahome: -n "$SCRIPTNAME" -- $@)
    if (( $? > 0 )); then
        (( badopt=1 ))
    else
        eval set -- "$my_opts"
        while true; do
            case $1 in
               "-h") help_oraDBCA                          #  help
                     exit 1;;
          "--port") ora_lsnr_port="$2"
                     shift 2;;
          "--orahome") ora_home="$2"
                     shift 2;;
          "--debug") DEBUG=TRUE                         # debug mode
                     set -x
                     shift ;;
           "--test") TEST=TRUE                           # test mode
                     shift ;;
           "--version"|"-v") echo "$SCRIPTNAME version: $SCRIPTVER" >&2
                     exit 0;;
                "--") shift; break;;                             # finish parsing
                  *) echo "ERROR! Bad command line option passed: $1"
                     (( badopt=1 ))
                     break ;;                                    # unknown flag
        esac
    done
  fi

  return $badopt

}

############################################################################################
# start here

OPTIONS=$@

# verify that we are root to run this script
if [ "x$USER" != "xoracle" ];then logMesg 1 "You must be logged in as oracle to run this script" E "NONE"; exit 1; fi

if checkopt_oraLsnr "$OPTIONS" ; then

    logMesg 0 "$SCRIPTNAME start" I "NONE"
    if [ "$DEBUG" == "TRUE" ]; then logMesg 0 "DEBUG Mode Enabled!" I "NONE" ; fi
    if [ "$TEST" == "TRUE" ]; then logMesg 0 "TEST Mode Enabled, commands will not be run." I "NONE" ; fi

    # check if a ORACLE_HOME and other settings, otherwise lookup default setting
    if [ -z "${ora_home:-}" ]; then ora_home=$( cfgGet "$CONF_FILE" srvr_ora_home ); fi
    if [ -z "${ora_lsnr_port:-}" ]; then ora_home=$( cfgGet "$CONF_FILE" srvr_ora_lsnr_port ); fi
    if [ "${ora_lsnr_port}" == = "__UNDEFINED__" ]; then ora_home=$( cfgGet "$DEF_CONF_FILE" ora_lsnr_port ); fi

    if [ "$TEST" == "TRUE" ]; then logMesg 0 "ORACLE_HOME: $ora_home" I "NONE" ; fi
    if [ "$TEST" == "TRUE" ]; then logMesg 0 "ora_lsnr_port: $ora_lsnr_port" I "NONE" ; fi
 
    # Setup Oracle environment
    ORACLE_HOME="$ora_home"
    ORACLE_BASE=$( "${ORACLE_HOME}/bin/orabase" )
    LD_LIBRARY_PATH=${ORACLE_HOME}/lib
    export ORACLE_HOME ORACLE_BASE LD_LIBRARY_PATH

    # run opatch to get db home version, only return the first line as that is probably the database product
    set -o pipefail; db_version=$( "${ORACLE_HOME}/OPatch/opatch" lsinventory | awk '/^Oracle Database/ {print $NF}' | head -1)
    return_code=$?
    if (( return_code > 0 )); then
        logMesg 1 "ORACLE_HOME failure getting version: $ORACLE_HOME" E "NONE" 
        exit 1
    fi
    if [ "$TEST" == "TRUE" ]; then logMesg 0 "db_version: $db_version" I "NONE" ; fi

    # Genearte a NETCA response file
    response_file="/tmp/netca.rsp"
    if [ "$TEST" == "TRUE" ]; then logMesg 0 "response_file: $response_file" I "NONE" ; fi

    echo "# Response file generated by $SCRIPTNAME " > "${response_file}"
    echo "#   on date: $( date )" >> "${response_file}"
    echo "[GENERAL]" >> "${response_file}"

    # check the first part of the version number before the period
    case "${db_version%%.*}" in
        "23b")
           echo "RESPONSEFILE_VERSION=\"23.0\"" >> "$response_file" 
           ;;
        "21")
           echo "RESPONSEFILE_VERSION=\"21.0\"" >> "$response_file" 
           ;;
        "19")
           echo "RESPONSEFILE_VERSION=\"19.0\"" >> "$response_file" 
           ;;
        *)
          echo "Oracle version not supported!"
          exit 1 ;;
    esac

    cat <<- EOF >> "${response_file}"
        RESPONSEFILE_VERSION="21.0"
        CREATE_TYPE="CUSTOM"
        
        [oracle.net.ca]
        INSTALLED_COMPONENTS={"server","net8","javavm"}
        INSTALL_TYPE=""typical""
        LISTENER_NUMBER=1
        LISTENER_NAMES={"LISTENER"}
        LISTENER_PROTOCOLS={"TCP;${ora_lsnr_port}"}
        LISTENER_START=""LISTENER""
        NAMING_METHODS={"TNSNAMES","ONAMES","HOSTNAME"}
        
        # TNS entries to create
        NSN_NUMBER=0
        NSN_NAMES={"EXTPROC_CONNECTION_DATA"}
        NSN_SERVICE={"PLSExtProc"}
        NSN_PROTOCOLS={"TCP;HOSTNAME;1521"}
    EOF

    # run NETCA 
    netca_options=" -silent"
    if [ "$TEST" == "TRUE" ]; then 
        logMesg 0 "netca command: ${ORACLE_HOME}/bin/netca $netca_options -responsefile $response_file" I "NONE"
    else
        sh -c "${ORACLE_HOME}/bin/netca $netca_options -responsefile $response_file"
        logMesg 0 "netca completed with return code: $?" I "NONE"
    fi
else
    echo "ERROR - invalid command line parameters" >&2
    exit 1
fi

#END


